{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOCNCLSL4/N/64yOyKXyOZG"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "g9ZXpE67aHFy"
      },
      "outputs": [],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n",
        "\n",
        "# Change directory to where 'python_utils.py' is stored\n",
        "%cd /content/drive/MyDrive/python_utils/\n",
        "\n",
        "# Import the python_utils module\n",
        "from helper_functions import *"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "zW1TwmnK7KsQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Now you can call functions\n",
        "print_llm_response(\"What is the capital of France?\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 127
        },
        "id": "AqfgMSqjaK5J",
        "outputId": "84e6ef42-1d35-458a-dd1d-7f514ba294f5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "____________________________________________________________________________________________________\n",
            "Paris\n",
            "\n",
            "____________________________________________________________________________________________________\n",
            "\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Lesson 4"
      ],
      "metadata": {
        "id": "tAD6L28bmaZP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Hello, World!\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fpZcJ1Grmg52",
        "outputId": "2cc4d0d8-7bf4-4fc0-ac55-154f96360ef6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello, World!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Hello, Sultan\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0OeMtWOLmvHD",
        "outputId": "0ee97a24-0af4-492a-f2a6-bbe1c8cf28e6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello, Sultan\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Exercise"
      ],
      "metadata": {
        "id": "ikQeWvzKnIst"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Write code that displays your favorite color\n",
        "print(\"My favorite color is blue\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uDB4KsxDm228",
        "outputId": "5c4e6bda-f0b2-41da-a595-aa9963dc20fd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "My favorite color is blue\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Write code that answers the question \"How are you feeling today?\"\n",
        "print(\"I am feeling good\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GISvYUW9nVUx",
        "outputId": "0b3bc754-d46f-4f99-8e95-1186a8fc1afc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "I am feeling good\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Alter your code from the previous cell so that it will cause an error when you run it\n",
        "prt(\"I am feeling good\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 166
        },
        "id": "9pFGgCh-njK4",
        "outputId": "ce506073-5bb4-4838-e6cc-7b4bb6f5185c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'prit' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-20-ea04579d0f9f>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Alter your code from the previous cell so that it will cause an error when you run it\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mprit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"I am feeling good\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'prit' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Ask an LLM to help you fix the error in the code in the previous cell (or fix yourself) and\n",
        "# then type the corrected code on the next line:\n",
        "print_llm_response('fix this code: prt(\"I am feeling good\")')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 184
        },
        "id": "HoB63DtNnodV",
        "outputId": "1d0c1bae-4fa9-4a73-ddba-4484f0cd93f7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'print_llm_response' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-787e6a393079>\u001b[0m in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Ask an LLM to help you fix the error in the code in the previous cell (or fix yourself) and\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;31m# then type the corrected code on the next line:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mprint_llm_response\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'fix this code: prt(\"I am feeling good\")'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'print_llm_response' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Lesson 6"
      ],
      "metadata": {
        "id": "gu3cr3yypaLP"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### type()"
      ],
      "metadata": {
        "id": "pps3GXQDqd75"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Example 1: Checking Types of Different Data Structures**"
      ],
      "metadata": {
        "id": "fJRFhfa0rc-u"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# A dictionary of mixed data types\n",
        "data = {\n",
        "    \"name\": \"Alice\",\n",
        "    \"age\": 30,\n",
        "    \"is_employee\": True,\n",
        "    \"salary\": 50000.50,\n",
        "    \"friends\": [\"Bob\", \"Charlie\"],\n",
        "    \"address\": {\"city\": \"Wonderland\", \"postal_code\": \"12345\"}\n",
        "}\n",
        "\n",
        "# Check the types of different elements in the dictionary\n",
        "for key, value in data.items():\n",
        "    print(f\"The type of '{key}' is {type(value)}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bJ8cpddwo6ef",
        "outputId": "ade58c2e-4a92-422d-9d8d-69b93934eabb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The type of 'name' is <class 'str'>\n",
            "The type of 'age' is <class 'int'>\n",
            "The type of 'is_employee' is <class 'bool'>\n",
            "The type of 'salary' is <class 'float'>\n",
            "The type of 'friends' is <class 'list'>\n",
            "The type of 'address' is <class 'dict'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Example 2: Creating and Checking Custom Class Types**"
      ],
      "metadata": {
        "id": "oRI6w78qrp4b"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Define a custom class\n",
        "class Person:\n",
        "    def __init__(self, name, age):\n",
        "        self.name = name\n",
        "        self.age = age\n",
        "\n",
        "# Create an instance of the class\n",
        "person1 = Person(\"Alice\", 30)\n",
        "\n",
        "# Check the type of the object\n",
        "print(f\"The type of person1 is {type(person1)}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y5xUzqe7ruAf",
        "outputId": "a51a71b4-0027-4c29-a7ea-f4377a27416e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The type of person1 is <class '__main__.Person'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Example 3: Using type() with Lambda Functions**"
      ],
      "metadata": {
        "id": "hKtfg_TZtFtg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a lambda function\n",
        "add_numbers = lambda x, y: x + y\n",
        "\n",
        "# Check the type of the lambda function\n",
        "print(f\"The type of add_numbers is {type(add_numbers)}\")\n",
        "\n",
        "# Call the lambda function\n",
        "result = add_numbers(5, 3)\n",
        "print(f\"Result of lambda function call: {result}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9pLNF-y2tMna",
        "outputId": "846046a3-8f47-44ea-ff13-ecc66f683e0b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The type of add_numbers is <class 'function'>\n",
            "Result of lambda function call: 8\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Lambda function to convert feet to meters\n",
        "feet_to_meters = lambda feet: feet * 0.3048\n",
        "\n",
        "# Convert 6 feet to meters\n",
        "feet = 6\n",
        "meters = feet_to_meters(feet)\n",
        "\n",
        "print(f\"{feet} feet is equal to {meters :.3f} meters.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M2p6sU1XvGLt",
        "outputId": "ed626168-705d-4ab6-8c85-193b27249ad1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "6 feet is equal to 1.829 meters.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# abstract syntax tree of the above Python code\n",
        "import ast\n",
        "\n",
        "# Python code to be parsed\n",
        "code = \"\"\"\n",
        "# Lambda function to convert feet to meters\n",
        "feet_to_meters = lambda feet: feet * 0.3048\n",
        "\n",
        "# Convert 6 feet to meters\n",
        "feet = 6\n",
        "meters = feet_to_meters(feet)\n",
        "\n",
        "print(f\"{feet} feet is equal to {meters :.3f} meters.\")\n",
        "\"\"\"\n",
        "\n",
        "# Parse the code into an AST\n",
        "parsed_code = ast.parse(code)\n",
        "\n",
        "# Dump the AST in a readable format\n",
        "ast_dump = ast.dump(parsed_code, indent=4)\n",
        "\n",
        "print(ast_dump)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_7gRftaWvwCS",
        "outputId": "520d9a99-6b4b-4368-9eb8-7d1b3dae8092"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Module(\n",
            "    body=[\n",
            "        Assign(\n",
            "            targets=[\n",
            "                Name(id='feet_to_meters', ctx=Store())],\n",
            "            value=Lambda(\n",
            "                args=arguments(\n",
            "                    posonlyargs=[],\n",
            "                    args=[\n",
            "                        arg(arg='feet')],\n",
            "                    kwonlyargs=[],\n",
            "                    kw_defaults=[],\n",
            "                    defaults=[]),\n",
            "                body=BinOp(\n",
            "                    left=Name(id='feet', ctx=Load()),\n",
            "                    op=Mult(),\n",
            "                    right=Constant(value=0.3048)))),\n",
            "        Assign(\n",
            "            targets=[\n",
            "                Name(id='feet', ctx=Store())],\n",
            "            value=Constant(value=6)),\n",
            "        Assign(\n",
            "            targets=[\n",
            "                Name(id='meters', ctx=Store())],\n",
            "            value=Call(\n",
            "                func=Name(id='feet_to_meters', ctx=Load()),\n",
            "                args=[\n",
            "                    Name(id='feet', ctx=Load())],\n",
            "                keywords=[])),\n",
            "        Expr(\n",
            "            value=Call(\n",
            "                func=Name(id='print', ctx=Load()),\n",
            "                args=[\n",
            "                    JoinedStr(\n",
            "                        values=[\n",
            "                            FormattedValue(\n",
            "                                value=Name(id='feet', ctx=Load()),\n",
            "                                conversion=-1),\n",
            "                            Constant(value=' feet is equal to '),\n",
            "                            FormattedValue(\n",
            "                                value=Name(id='meters', ctx=Load()),\n",
            "                                conversion=-1,\n",
            "                                format_spec=JoinedStr(\n",
            "                                    values=[\n",
            "                                        Constant(value='.3f')])),\n",
            "                            Constant(value=' meters.')])],\n",
            "                keywords=[]))],\n",
            "    type_ignores=[])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Lesson 7"
      ],
      "metadata": {
        "id": "k0QJBY3Dm4BU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Lambda function to convert degrees Celsius to a temperature in degrees Fahrenheit\n",
        "celsius_to_fahrenheit = lambda fahrenheit: (fahrenheit - 32) * 5 / 9\n",
        "\n",
        "\n",
        "fahrenheit  = 0\n",
        "celsius = celsius_to_fahrenheit(fahrenheit)\n",
        "\n",
        "print(f\"{fahrenheit} degrees fahrenheit is equal to {celsius :.3f} degrees celsius.\")\n"
      ],
      "metadata": {
        "id": "yu__aNeQwC6L",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f8299bea-b694-443a-d674-0baa6a0971fe"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0 degrees fahrenheit is equal to -17.778 degrees celsius.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### f-Strings\n",
        "\n",
        "1.   Aligning text\n",
        "\n"
      ],
      "metadata": {
        "id": "5c2gCHEHs5v8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "text = \"Python\"\n",
        "print(f\"|{text:<10}|\")  # Left-align: Outputs: |Python    |\n",
        "print(f\"|{text:>10}|\")  # Right-align: Outputs: |    Python|\n",
        "print(f\"|{text:^10}|\")  # Center-align: Outputs: |  Python  |\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "49T5pngNs7_a",
        "outputId": "372b10c3-f079-4dd4-811d-71b8904cb3d5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "|Python    |\n",
            "|    Python|\n",
            "|  Python  |\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "\n",
        "2.   Embedding Function Calls\n",
        "\n"
      ],
      "metadata": {
        "id": "ZIIOW1dethXR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def greet(name):\n",
        "    return f\"Hello, {name}!\"\n",
        "\n",
        "print(f\"{greet('Alice')} How are you?\")\n",
        "# Outputs: Hello, Alice! How are you?\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "naCZdNAtttUm",
        "outputId": "be012b79-e6cb-472f-86fd-edaf6b2f207b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello, Alice! How are you?\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "3.   Using Dictionaries with F-Strings\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "EIBKuD2vuoww"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data = {\"name\": \"Alice\", \"age\": 25}\n",
        "print(f\"My name is {data['name']}, and I am {data['age']} years old.\")\n",
        "# Outputs: My name is Alice, and I am 25 years old.\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SdcVwhcHuoY2",
        "outputId": "19c4ccce-a579-4a88-e23a-6ec878b486c9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "My name is Alice, and I am 25 years old.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "4.    Nested F-Strings\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "NBNJEaXQuzcK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "name = \"Alice\"\n",
        "age = 25\n",
        "greeting = f\"Hello, {name}\"\n",
        "message = f\"{greeting}, you are {age} years old.\"\n",
        "print(message)\n",
        "# Outputs: Hello, Alice, you are 25 years old.\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nEqAh69Luy-W",
        "outputId": "8d0331d1-a723-4817-cc4b-0370008abcbf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello, Alice, you are 25 years old.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "5.    Multi-line F-Strings\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "fV_iR98ZvGvy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "name = \"Alice\"\n",
        "age = 25\n",
        "bio = f\"\"\"\n",
        "Name: {name}\n",
        "Age: {age}\n",
        "\"\"\"\n",
        "print(bio)\n",
        "# Outputs:\n",
        "# Name: Alice\n",
        "# Age: 2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K3C1Welvuy2O",
        "outputId": "39d584c9-2e62-4c46-8aa3-33d9a34b0a9d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Name: Alice\n",
            "Age: 25\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Lesson 8"
      ],
      "metadata": {
        "id": "iPVrx0gAv4ea"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "age: int = 28\n",
        "type(age)\n",
        "# to see the methods and attributes of int object\n",
        "print([i for i in dir(age) if'__' not in i ])"
      ],
      "metadata": {
        "id": "xHo9weIguysl",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "66fb815e-4c25-44a7-a418-f5aea2fba214"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['as_integer_ratio', 'bit_count', 'bit_length', 'conjugate', 'denominator', 'from_bytes', 'imag', 'numerator', 'real', 'to_bytes']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "age.to_bytes(2, byteorder='big')"
      ],
      "metadata": {
        "id": "e_YK1ZIhumGb",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fc3a0291-a2af-4f68-fba0-132be9f43371"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "b'\\x00\\x1c'"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "help(age.to_bytes)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3lUZfX8rxLfv",
        "outputId": "036015f4-65c5-4d1b-d77b-fe1b738b876a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Help on built-in function to_bytes:\n",
            "\n",
            "to_bytes(length, byteorder, *, signed=False) method of builtins.int instance\n",
            "    Return an array of bytes representing an integer.\n",
            "    \n",
            "    length\n",
            "      Length of bytes object to use.  An OverflowError is raised if the\n",
            "      integer is not representable with the given number of bytes.\n",
            "    byteorder\n",
            "      The byte order used to represent the integer.  If byteorder is 'big',\n",
            "      the most significant byte is at the beginning of the byte array.  If\n",
            "      byteorder is 'little', the most significant byte is at the end of the\n",
            "      byte array.  To request the native byte order of the host system, use\n",
            "      `sys.byteorder' as the byte order value.\n",
            "    signed\n",
            "      Determines whether two's complement is used to represent the integer.\n",
            "      If signed is False and a negative integer is given, an OverflowError\n",
            "      is raised.\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "age =21.22\n",
        "type(age)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YRMZ7reuyYiv",
        "outputId": "9b730eac-3990-4637-8b83-3e372c7285a9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "float"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Lesson 9"
      ],
      "metadata": {
        "id": "RD--8iLO0rQD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!curl -o helper_functions.py https://raw.githubusercontent.com/panaversity/learn-cloud-native-modern-ai-python/main/04_natural_language_programming/02_ai_python_for_beginners/course1_basics/Lesson_9/helper_functions.py"
      ],
      "metadata": {
        "id": "SNZdPsRsyszf",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8965f81e-0396-459c-ade8-664a6c3fb6a2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n",
            "                                 Dload  Upload   Total   Spent    Left  Speed\n",
            "\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100  3944  100  3944    0     0  26593      0 --:--:-- --:--:-- --:--:-- 26648\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from helper_functions import print_llm_response"
      ],
      "metadata": {
        "id": "duUDegfi0kw8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print_llm_response(\"What is the capital of KSA?\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 54
        },
        "id": "GNijrCTX4D6O",
        "outputId": "673af49f-8aaf-44c4-a844-533cf1999ca7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The capital of KSA (Kingdom of Saudi Arabia) is **Riyadh**.\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Lesson 10"
      ],
      "metadata": {
        "id": "0GZTGQ0B4lv-"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "jMXyoUnF3_ub"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}